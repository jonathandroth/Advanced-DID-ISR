grid.lb=NA,
...) {
type <- type[1]
# make sure that user is passing in an event study
if (es$type != "dynamic") {
stop("need to pass in an event study")
}
# check if used universal base period and warn otherwise
if (es$DIDparams$base_period != "universal") {
stop("Use a universal base period for honest_did")
}
# recover influence function for event study estimates
es_inf_func <- es$inf.function$dynamic.inf.func.e
# recover variance-covariance matrix
n <- nrow(es_inf_func)
V <- t(es_inf_func) %*% es_inf_func / (n*n)
#Remove the coefficient normalized to zero
referencePeriodIndex <- which(es$egt == -1)
V <- V[-referencePeriodIndex,-referencePeriodIndex]
beta <- es$att.egt[-referencePeriodIndex]
nperiods <- nrow(V)
npre <- sum(1*(es$egt < -1))
npost <- nperiods - npre
baseVec1 <- basisVector(index=(e+1),size=npost)
orig_ci <- constructOriginalCS(betahat = es$att.egt,
sigma = V, numPrePeriods = npre,
numPostPeriods = npost,
l_vec = baseVec1)
if (type=="relative_magnitude") {
if (is.null(method)) method <- "C-LF"
robust_ci <- createSensitivityResults_relativeMagnitudes(betahat = es$att.egt, sigma = V,
numPrePeriods = npre,
numPostPeriods = npost,
bound=bound,
method=method,
l_vec = baseVec1,
Mbarvec = Mbarvec,
monotonicityDirection=monotonicityDirection,
biasDirection=biasDirection,
alpha=alpha,
gridPoints=100,
parallel=parallel)
} else if (type=="smoothness") {
robust_ci <- createSensitivityResults(betahat = es$att.egt,
sigma = V,
numPrePeriods = npre,
numPostPeriods = npost,
method=method,
l_vec = baseVec1,
monotonicityDirection=monotonicityDirection,
biasDirection=biasDirection,
alpha=alpha,
parallel=parallel)
}
return(list(robust_ci=robust_ci, orig_ci=orig_ci, type=type))
}
sensitivity_results <-
honest_did.AGGTEobj(es,
e =0,
type = "relative_magnitude",
Mbarvec = seq(from = 0.5, to = 2, by = 0.5))
createSensitivityPlot_relativeMagnitudes(sensitivity_results$robust_ci,
sensitivity_results$orig_ci)
which(c(1,2) ==1)
e=0
type = "relative_magnitude"
Mbarvec = seq(from = 0.5, to = 2, by = 0.5)
type <- type[1]
# make sure that user is passing in an event study
if (es$type != "dynamic") {
stop("need to pass in an event study")
}
# check if used universal base period and warn otherwise
if (es$DIDparams$base_period != "universal") {
stop("Use a universal base period for honest_did")
}
es_inf_func <- es$inf.function$dynamic.inf.func.e
# recover variance-covariance matrix
n <- nrow(es_inf_func)
V <- t(es_inf_func) %*% es_inf_func / (n*n)
which(es$egt == -1)
referencePeriodIndex <- which(es$egt == -1)
nrow(V)
ncol(V)
V[-referencePeriodIndex,-referencePeriodIndex]
V <- V[-referencePeriodIndex,-referencePeriodIndex]
beta <- es$att.egt[-referencePeriodIndex]
beta
honest_did <- function(es, ...) {
UseMethod("honest_did", es)
}
honest_did.AGGTEobj <- function(es,
e=0,
type=c("smoothness", "relative_magnitude"),
method=NULL,
bound="deviation from parallel trends",
Mvec=NULL,
Mbarvec=NULL,
monotonicityDirection=NULL,
biasDirection=NULL,
alpha=0.05,
parallel=FALSE,
gridPoints=10^3,
grid.ub=NA,
grid.lb=NA,
...) {
type <- type[1]
# make sure that user is passing in an event study
if (es$type != "dynamic") {
stop("need to pass in an event study")
}
# check if used universal base period and warn otherwise
if (es$DIDparams$base_period != "universal") {
stop("Use a universal base period for honest_did")
}
# recover influence function for event study estimates
es_inf_func <- es$inf.function$dynamic.inf.func.e
# recover variance-covariance matrix
n <- nrow(es_inf_func)
V <- t(es_inf_func) %*% es_inf_func / (n*n)
#Remove the coefficient normalized to zero
referencePeriodIndex <- which(es$egt == -1)
V <- V[-referencePeriodIndex,-referencePeriodIndex]
beta <- es$att.egt[-referencePeriodIndex]
nperiods <- nrow(V)
npre <- sum(1*(es$egt < -1))
npost <- nperiods - npre
baseVec1 <- basisVector(index=(e+1),size=npost)
orig_ci <- constructOriginalCS(betahat = beta,
sigma = V, numPrePeriods = npre,
numPostPeriods = npost,
l_vec = baseVec1)
if (type=="relative_magnitude") {
if (is.null(method)) method <- "C-LF"
robust_ci <- createSensitivityResults_relativeMagnitudes(betahat = es$att.egt, sigma = V,
numPrePeriods = npre,
numPostPeriods = npost,
bound=bound,
method=method,
l_vec = baseVec1,
Mbarvec = Mbarvec,
monotonicityDirection=monotonicityDirection,
biasDirection=biasDirection,
alpha=alpha,
gridPoints=100,
parallel=parallel)
} else if (type=="smoothness") {
robust_ci <- createSensitivityResults(betahat = es$att.egt,
sigma = V,
numPrePeriods = npre,
numPostPeriods = npost,
method=method,
l_vec = baseVec1,
monotonicityDirection=monotonicityDirection,
biasDirection=biasDirection,
alpha=alpha,
parallel=parallel)
}
return(list(robust_ci=robust_ci, orig_ci=orig_ci, type=type))
}
###
# Run the CS event-study with 'universal' base-period
cs_results <- att_gt(yname = "dins",
tname = "year",
idname = "stfips",
gname = "yexp2",
data = df %>% mutate(yexp2 = ifelse(is.na(yexp2), 3000, yexp2)),
control_group = "notyettreated",
base_period = "universal")
es <- aggte(cs_results, type = "dynamic",
min_e = -5, max_e = 5)
#Run sensitivity analysis for relative magnitudes
sensitivity_results <-
honest_did.AGGTEobj(es,
e =0,
type = "relative_magnitude",
Mbarvec = seq(from = 0.5, to = 2, by = 0.5))
honest_did <- function(es, ...) {
UseMethod("honest_did", es)
}
honest_did.AGGTEobj <- function(es,
e=0,
type=c("smoothness", "relative_magnitude"),
method=NULL,
bound="deviation from parallel trends",
Mvec=NULL,
Mbarvec=NULL,
monotonicityDirection=NULL,
biasDirection=NULL,
alpha=0.05,
parallel=FALSE,
gridPoints=10^3,
grid.ub=NA,
grid.lb=NA,
...) {
type <- type[1]
# make sure that user is passing in an event study
if (es$type != "dynamic") {
stop("need to pass in an event study")
}
# check if used universal base period and warn otherwise
if (es$DIDparams$base_period != "universal") {
stop("Use a universal base period for honest_did")
}
# recover influence function for event study estimates
es_inf_func <- es$inf.function$dynamic.inf.func.e
# recover variance-covariance matrix
n <- nrow(es_inf_func)
V <- t(es_inf_func) %*% es_inf_func / (n*n)
#Remove the coefficient normalized to zero
referencePeriodIndex <- which(es$egt == -1)
V <- V[-referencePeriodIndex,-referencePeriodIndex]
beta <- es$att.egt[-referencePeriodIndex]
nperiods <- nrow(V)
npre <- sum(1*(es$egt < -1))
npost <- nperiods - npre
baseVec1 <- basisVector(index=(e+1),size=npost)
orig_ci <- constructOriginalCS(betahat = beta,
sigma = V, numPrePeriods = npre,
numPostPeriods = npost,
l_vec = baseVec1)
if (type=="relative_magnitude") {
if (is.null(method)) method <- "C-LF"
robust_ci <- createSensitivityResults_relativeMagnitudes(betahat = beta, sigma = V,
numPrePeriods = npre,
numPostPeriods = npost,
bound=bound,
method=method,
l_vec = baseVec1,
Mbarvec = Mbarvec,
monotonicityDirection=monotonicityDirection,
biasDirection=biasDirection,
alpha=alpha,
gridPoints=100,
parallel=parallel)
} else if (type=="smoothness") {
robust_ci <- createSensitivityResults(betahat = beta,
sigma = V,
numPrePeriods = npre,
numPostPeriods = npost,
method=method,
l_vec = baseVec1,
monotonicityDirection=monotonicityDirection,
biasDirection=biasDirection,
alpha=alpha,
parallel=parallel)
}
return(list(robust_ci=robust_ci, orig_ci=orig_ci, type=type))
}
###
# Run the CS event-study with 'universal' base-period
cs_results <- att_gt(yname = "dins",
tname = "year",
idname = "stfips",
gname = "yexp2",
data = df %>% mutate(yexp2 = ifelse(is.na(yexp2), 3000, yexp2)),
control_group = "notyettreated",
base_period = "universal")
es <- aggte(cs_results, type = "dynamic",
min_e = -5, max_e = 5)
#Run sensitivity analysis for relative magnitudes
sensitivity_results <-
honest_did.AGGTEobj(es,
e =0,
type = "relative_magnitude",
Mbarvec = seq(from = 0.5, to = 2, by = 0.5))
createSensitivityPlot_relativeMagnitudes(sensitivity_results$robust_ci,
sensitivity_results$orig_ci)
### First, we import the function Pedro created ####
#' @title honest_did
#'
#' @description a function to compute a sensitivity analysis
#'  using the approach of Rambachan and Roth (2021)
#' @param es an event study
honest_did <- function(es, ...) {
UseMethod("honest_did", es)
}
#' @title honest_did.AGGTEobj
#'
#' @description a function to compute a sensitivity analysis
#'  using the approach of Rambachan and Roth (2021) when
#'  the event study is estimating using the `did` package
#'
#' @param e event time to compute the sensitivity analysis for.
#'  The default value is `e=0` corresponding to the "on impact"
#'  effect of participating in the treatment.
#' @param type Options are "smoothness" (which conducts a
#'  sensitivity analysis allowing for violations of linear trends
#'  in pre-treatment periods) or "relative_magnitude" (which
#'  conducts a sensitivity analysis based on the relative magnitudes
#'  of deviations from parallel trends in pre-treatment periods).
#' @inheritParams HonestDiD::createSensitivityResults
#' @inheritParams HonestDid::createSensitivityResults_relativeMagnitudes
honest_did.AGGTEobj <- function(es,
e=0,
type=c("smoothness", "relative_magnitude"),
method=NULL,
bound="deviation from parallel trends",
Mvec=NULL,
Mbarvec=NULL,
monotonicityDirection=NULL,
biasDirection=NULL,
alpha=0.05,
parallel=FALSE,
gridPoints=10^3,
grid.ub=NA,
grid.lb=NA,
...) {
type <- type[1]
# make sure that user is passing in an event study
if (es$type != "dynamic") {
stop("need to pass in an event study")
}
# check if used universal base period and warn otherwise
if (es$DIDparams$base_period != "universal") {
stop("Use a universal base period for honest_did")
}
# recover influence function for event study estimates
es_inf_func <- es$inf.function$dynamic.inf.func.e
# recover variance-covariance matrix
n <- nrow(es_inf_func)
V <- t(es_inf_func) %*% es_inf_func / (n*n)
#Remove the coefficient normalized to zero
referencePeriodIndex <- which(es$egt == -1)
V <- V[-referencePeriodIndex,-referencePeriodIndex]
beta <- es$att.egt[-referencePeriodIndex]
nperiods <- nrow(V)
npre <- sum(1*(es$egt < -1))
npost <- nperiods - npre
baseVec1 <- basisVector(index=(e+1),size=npost)
orig_ci <- constructOriginalCS(betahat = beta,
sigma = V, numPrePeriods = npre,
numPostPeriods = npost,
l_vec = baseVec1)
if (type=="relative_magnitude") {
if (is.null(method)) method <- "C-LF"
robust_ci <- createSensitivityResults_relativeMagnitudes(betahat = beta, sigma = V,
numPrePeriods = npre,
numPostPeriods = npost,
bound=bound,
method=method,
l_vec = baseVec1,
Mbarvec = Mbarvec,
monotonicityDirection=monotonicityDirection,
biasDirection=biasDirection,
alpha=alpha,
gridPoints=100,
parallel=parallel)
} else if (type=="smoothness") {
robust_ci <- createSensitivityResults(betahat = beta,
sigma = V,
numPrePeriods = npre,
numPostPeriods = npost,
method=method,
l_vec = baseVec1,
monotonicityDirection=monotonicityDirection,
biasDirection=biasDirection,
alpha=alpha,
parallel=parallel)
}
return(list(robust_ci=robust_ci, orig_ci=orig_ci, type=type))
}
###
# Run the CS event-study with 'universal' base-period
cs_results <- att_gt(yname = "dins",
tname = "year",
idname = "stfips",
gname = "yexp2",
data = df %>% mutate(yexp2 = ifelse(is.na(yexp2), 3000, yexp2)),
control_group = "notyettreated",
base_period = "universal")
es <- aggte(cs_results, type = "dynamic",
min_e = -5, max_e = 5)
#Run sensitivity analysis for relative magnitudes
sensitivity_results <-
honest_did.AGGTEobj(es,
e =0,
type = "relative_magnitude",
Mbarvec = seq(from = 0.5, to = 2, by = 0.5))
createSensitivityPlot_relativeMagnitudes(sensitivity_results$robust_ci,
sensitivity_results$orig_ci)
### First, we import the function Pedro created ####
#' @title honest_did
#'
#' @description a function to compute a sensitivity analysis
#'  using the approach of Rambachan and Roth (2021)
#' @param es an event study
honest_did <- function(es, ...) {
UseMethod("honest_did", es)
}
#' @title honest_did.AGGTEobj
#'
#' @description a function to compute a sensitivity analysis
#'  using the approach of Rambachan and Roth (2021) when
#'  the event study is estimating using the `did` package
#'
#' @param e event time to compute the sensitivity analysis for.
#'  The default value is `e=0` corresponding to the "on impact"
#'  effect of participating in the treatment.
#' @param type Options are "smoothness" (which conducts a
#'  sensitivity analysis allowing for violations of linear trends
#'  in pre-treatment periods) or "relative_magnitude" (which
#'  conducts a sensitivity analysis based on the relative magnitudes
#'  of deviations from parallel trends in pre-treatment periods).
#' @inheritParams HonestDiD::createSensitivityResults
#' @inheritParams HonestDid::createSensitivityResults_relativeMagnitudes
honest_did.AGGTEobj <- function(es,
e=0,
type=c("smoothness", "relative_magnitude"),
method=NULL,
bound="deviation from parallel trends",
Mvec=NULL,
Mbarvec=NULL,
monotonicityDirection=NULL,
biasDirection=NULL,
alpha=0.05,
parallel=FALSE,
gridPoints=10^3,
grid.ub=NA,
grid.lb=NA,
...) {
type <- type[1]
# make sure that user is passing in an event study
if (es$type != "dynamic") {
stop("need to pass in an event study")
}
# check if used universal base period and warn otherwise
if (es$DIDparams$base_period != "universal") {
stop("Use a universal base period for honest_did")
}
# recover influence function for event study estimates
es_inf_func <- es$inf.function$dynamic.inf.func.e
# recover variance-covariance matrix
n <- nrow(es_inf_func)
V <- t(es_inf_func) %*% es_inf_func / (n*n)
#Remove the coefficient normalized to zero
referencePeriodIndex <- which(es$egt == -1)
V <- V[-referencePeriodIndex,-referencePeriodIndex]
beta <- es$att.egt[-referencePeriodIndex]
nperiods <- nrow(V)
npre <- sum(1*(es$egt < -1))
npost <- nperiods - npre
baseVec1 <- basisVector(index=(e+1),size=npost)
orig_ci <- constructOriginalCS(betahat = beta,
sigma = V, numPrePeriods = npre,
numPostPeriods = npost,
l_vec = baseVec1)
if (type=="relative_magnitude") {
if (is.null(method)) method <- "C-LF"
robust_ci <- createSensitivityResults_relativeMagnitudes(betahat = beta, sigma = V,
numPrePeriods = npre,
numPostPeriods = npost,
bound=bound,
method=method,
l_vec = baseVec1,
Mbarvec = Mbarvec,
monotonicityDirection=monotonicityDirection,
biasDirection=biasDirection,
alpha=alpha,
gridPoints=100,
parallel=parallel)
} else if (type=="smoothness") {
robust_ci <- createSensitivityResults(betahat = beta,
sigma = V,
numPrePeriods = npre,
numPostPeriods = npost,
method=method,
l_vec = baseVec1,
monotonicityDirection=monotonicityDirection,
biasDirection=biasDirection,
alpha=alpha,
parallel=parallel)
}
return(list(robust_ci=robust_ci, orig_ci=orig_ci, type=type))
}
###
# Run the CS event-study with 'universal' base-period
cs_results <- att_gt(yname = "dins",
tname = "year",
idname = "stfips",
gname = "yexp2",
data = df %>% mutate(yexp2 = ifelse(is.na(yexp2), 3000, yexp2)),
control_group = "notyettreated",
base_period = "universal")
es <- aggte(cs_results, type = "dynamic",
min_e = -5, max_e = 5)
#Run sensitivity analysis for relative magnitudes
sensitivity_results <-
honest_did.AGGTEobj(es,
e =0,
type = "relative_magnitude",
Mbarvec = seq(from = 0.5, to = 2, by = 0.5))
createSensitivityPlot_relativeMagnitudes(sensitivity_results$robust_ci,
sensitivity_results$orig_ci)
rm(list=ls())
library(dplyr)
library(did)
library(haven)
df <- haven::read_dta("https://raw.githubusercontent.com/Mixtape-Sessions/Advanced-DID/main/Exercises/Data/ehec_data.dta")
cs_results <- att_gt(yname = "dins",
tname = "year",
idname = "stfips",
gname = "yexp2",
data = df %>% mutate(yexp2 = ifelse(is.na(yexp2), 3000, yexp2)),
control_group = "notyettreated",
base_period = "universal")
es_universal <- aggte(cs_results,
type = "dynamic",
min_e = -5, max_e = 5,
)
ggdid(es_universal)
summary(es_universal)
